nrstring = "7316717653133062491922511967442657474235534919493496983520312774506326239" \
           "5783180169848018694788518438586156078911294949545950173795833195285320880" \
           "5511125406987471585238630507156932909632952274430435576689664895044524452" \
           "3161731856403098711121722383113622298934233803081353362766142828064444866" \
           "4523874930358907296290491560440772390713810515859307960866701724271218839" \
           "9879790879227492190169972088809377665727333001053367881220235421809751254" \
           "5405947522435258490771167055601360483958644670632441572215539753697817977" \
           "8461740649551492908625693219784686224828397224137565705605749026140797296" \
           "8652414535100474821663704844031998900088952434506585412275886668811642717" \
           "1479924442928230863465674813919123162824586178664583591245665294765456828" \
           "4891288314260769004224219022671055626321111109370544217506941658960408071" \
           "9840385096245544436298123098787992724428490918884580156166097919133875499" \
           "2005240636899125607176060588611646710940507754100225698315520005593572972" \
           "571636269561882670428252483600823257530420752963450"
selected_numbers = []
number_length = 13
for i, nr in enumerate(nrstring):
    try:
        selected_numbers.append(nrstring[i:i + number_length])
    except IndexError:
        break

prev_nr = 1
for nr in selected_numbers:
    current_nr = 1
    for d in nr:
        current_nr *= int(d)
    if current_nr > prev_nr:
        prev_nr = current_nr

print prev_nr

#
# def deco():
#     nr = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
#     print nr
#     while nr > 0:
#         nth_digi = nr % 10
#         yield nth_digi
#         nr = nr / 10
#
#
# def reversed_iterator(iter):
#     return reversed(list(iter))
#
#
# nrs = []
# nrs_in_range = []
# nr_len = 4
# for nr in reversed_iterator(deco()):
#     nrs.append(nr)
#
# for i, nr in enumerate(nrs):
#     try:
#         maxnr = nrs[i + nr_len]
#     except IndexError:
#         break
#     nrs_in_range.append(nrs[i:i + nr_len])
#
# prev_nr = 1
# for nr in nrs_in_range:
#     current_nr = 1
#     for d in nr:
#         current_nr *= int(d)
#     if current_nr > prev_nr:
#         prev_nr = current_nr
#
# print prev_nr
